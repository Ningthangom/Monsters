{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GAAD,OAEhB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACpB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHfC,EAAW,SAAAR,GAAK,OAE1B,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLjBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACHb,UAAU,SACPW,YAAaA,EACbG,SAAUF,MC2DXG,E,kDA3Db,aAAe,IAAD,8BACZ,gBAiCAH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjCvC,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IAJF,E,qDAkBd,WAAqB,IAAD,OAElBI,MAAM,8CAKLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAEzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAASkB,S,oBAWxC,WAEE,MAAiCC,KAAKN,MAA/Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAClD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,iBACVC,aAAce,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAnDVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.84513c55.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => (\r\n\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n          <h2>{props.monster.name}</h2>\r\n          <p>{props.monster.email}</p>\r\n    </div>\r\n)","\r\nimport React from 'react'\r\nimport './card-list.style.css'\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => (\r\n  \r\n   <div className='card-list'>\r\n       {props.monsters.map(monster => (\r\n           <Card key={monster.id} monster={monster}/>\r\n       ))}\r\n       </div>\r\n)\r\n","import React from 'react'\r\nimport './search-box.style.css'\r\n\r\n// if you don't need internal state nor access to lifecircle methods, you can just use functional components\r\nexport const SearchBox = ({placeholder, handleChange }) => (\r\n    <input type=\"search\"\r\n             className=\"search\"\r\n                placeholder={placeholder}\r\n                onChange={handleChange}\r\n   />\r\n)\r\n\r\n\r\n\r\n","import React , { Component} from 'react';\nimport './App.css';\n\n\nimport { CardList } from './components/card-list/card-list.component';\nimport {SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n     monsters: [ ],\n     searchField: ''\n    }\n    // .bind is a method on any function that returns a new\n    // function where the context of[this ] is set to whatever is passed \n   /*  this.handleChange = this.handleChange.bind(this); */\n  }\n\n  // making handlechange as a method with the e signature\n/*   handleChange(e) {\n    this.setState({searchField: e.target.value})\n  }\n */\n\n  // component did mount will call any code inside its function and render it\n  componentDidMount() {\n    //this fetch returns a promise which is .then \n    fetch('https://jsonplaceholder.typicode.com/users')\n\n    //.then just return Response which is not json and not understood by js \n   /*  .then(response =>console.log(response)) */\n    // the data need to be transformed into json format\n    .then(response =>response.json())\n    // now return the body as users then set users to monsters \n    .then(users=> this.setState({monsters:users}))\n  }\n\n      // the above code {handleChange(e)} can be re-written with arrow function \n    // this way we don't need to bind  [this] into the method \n    // because arrow function automatically define [this]\n\n    handleChange = e =>{\n      this.setState({searchField: e.target.value})\n    }\n  \n  render() {\n    // destructing \n    const {monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monster'\n            handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n\n          </CardList>\n \n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}